# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _NurbsVector
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import NurbsBasicArray
import NurbsPoint
import NurbsHPoint
class Vector_INT(NurbsBasicArray.BasicArray_INT):
    __swig_setmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_INT]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_INT, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_INT]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_INT, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsVector.Vector_INT_rows(*args)
    def __init__(self, *args): 
        this = _NurbsVector.new_Vector_INT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsVector.delete_Vector_INT
    __del__ = lambda self : None;
    def __iadd__(*args): return _NurbsVector.Vector_INT___iadd__(*args)
    def __isub__(*args): return _NurbsVector.Vector_INT___isub__(*args)
    def assign_from(*args): return _NurbsVector.Vector_INT_assign_from(*args)
    def as_func(*args): return _NurbsVector.Vector_INT_as_func(*args)
    def get(*args): return _NurbsVector.Vector_INT_get(*args)
    def minIndex(*args): return _NurbsVector.Vector_INT_minIndex(*args)
    def minimum(*args): return _NurbsVector.Vector_INT_minimum(*args)
    def qSortStd(*args): return _NurbsVector.Vector_INT_qSortStd(*args)
    def qSort(*args): return _NurbsVector.Vector_INT_qSort(*args)
    def sortIndex(*args): return _NurbsVector.Vector_INT_sortIndex(*args)
Vector_INT_swigregister = _NurbsVector.Vector_INT_swigregister
Vector_INT_swigregister(Vector_INT)

class Vector_DOUBLE(NurbsBasicArray.BasicArray_DOUBLE):
    __swig_setmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_DOUBLE]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_DOUBLE, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_DOUBLE]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_DOUBLE, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsVector.Vector_DOUBLE_rows(*args)
    def __init__(self, *args): 
        this = _NurbsVector.new_Vector_DOUBLE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsVector.delete_Vector_DOUBLE
    __del__ = lambda self : None;
    def __iadd__(*args): return _NurbsVector.Vector_DOUBLE___iadd__(*args)
    def __isub__(*args): return _NurbsVector.Vector_DOUBLE___isub__(*args)
    def assign_from(*args): return _NurbsVector.Vector_DOUBLE_assign_from(*args)
    def as_func(*args): return _NurbsVector.Vector_DOUBLE_as_func(*args)
    def get(*args): return _NurbsVector.Vector_DOUBLE_get(*args)
    def minIndex(*args): return _NurbsVector.Vector_DOUBLE_minIndex(*args)
    def minimum(*args): return _NurbsVector.Vector_DOUBLE_minimum(*args)
    def qSortStd(*args): return _NurbsVector.Vector_DOUBLE_qSortStd(*args)
    def qSort(*args): return _NurbsVector.Vector_DOUBLE_qSort(*args)
    def sortIndex(*args): return _NurbsVector.Vector_DOUBLE_sortIndex(*args)
Vector_DOUBLE_swigregister = _NurbsVector.Vector_DOUBLE_swigregister
Vector_DOUBLE_swigregister(Vector_DOUBLE)

class Vector_Point2Dd(NurbsBasicArray.BasicArray_Point2Dd):
    __swig_setmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_Point2Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_Point2Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_Point2Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_Point2Dd, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsVector.Vector_Point2Dd_rows(*args)
    def __init__(self, *args): 
        this = _NurbsVector.new_Vector_Point2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsVector.delete_Vector_Point2Dd
    __del__ = lambda self : None;
    def __iadd__(*args): return _NurbsVector.Vector_Point2Dd___iadd__(*args)
    def __isub__(*args): return _NurbsVector.Vector_Point2Dd___isub__(*args)
    def assign_from(*args): return _NurbsVector.Vector_Point2Dd_assign_from(*args)
    def as_func(*args): return _NurbsVector.Vector_Point2Dd_as_func(*args)
    def get(*args): return _NurbsVector.Vector_Point2Dd_get(*args)
    def minIndex(*args): return _NurbsVector.Vector_Point2Dd_minIndex(*args)
    def minimum(*args): return _NurbsVector.Vector_Point2Dd_minimum(*args)
    def qSortStd(*args): return _NurbsVector.Vector_Point2Dd_qSortStd(*args)
    def qSort(*args): return _NurbsVector.Vector_Point2Dd_qSort(*args)
    def sortIndex(*args): return _NurbsVector.Vector_Point2Dd_sortIndex(*args)
Vector_Point2Dd_swigregister = _NurbsVector.Vector_Point2Dd_swigregister
Vector_Point2Dd_swigregister(Vector_Point2Dd)

class Vector_Point3Dd(NurbsBasicArray.BasicArray_Point3Dd):
    __swig_setmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_Point3Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_Point3Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_Point3Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_Point3Dd, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsVector.Vector_Point3Dd_rows(*args)
    def __init__(self, *args): 
        this = _NurbsVector.new_Vector_Point3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsVector.delete_Vector_Point3Dd
    __del__ = lambda self : None;
    def __iadd__(*args): return _NurbsVector.Vector_Point3Dd___iadd__(*args)
    def __isub__(*args): return _NurbsVector.Vector_Point3Dd___isub__(*args)
    def assign_from(*args): return _NurbsVector.Vector_Point3Dd_assign_from(*args)
    def as_func(*args): return _NurbsVector.Vector_Point3Dd_as_func(*args)
    def get(*args): return _NurbsVector.Vector_Point3Dd_get(*args)
    def minIndex(*args): return _NurbsVector.Vector_Point3Dd_minIndex(*args)
    def minimum(*args): return _NurbsVector.Vector_Point3Dd_minimum(*args)
    def qSortStd(*args): return _NurbsVector.Vector_Point3Dd_qSortStd(*args)
    def qSort(*args): return _NurbsVector.Vector_Point3Dd_qSort(*args)
    def sortIndex(*args): return _NurbsVector.Vector_Point3Dd_sortIndex(*args)
Vector_Point3Dd_swigregister = _NurbsVector.Vector_Point3Dd_swigregister
Vector_Point3Dd_swigregister(Vector_Point3Dd)

class Vector_HPoint2Dd(NurbsBasicArray.BasicArray_HPoint2Dd):
    __swig_setmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_HPoint2Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_HPoint2Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_HPoint2Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_HPoint2Dd, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsVector.Vector_HPoint2Dd_rows(*args)
    def __init__(self, *args): 
        this = _NurbsVector.new_Vector_HPoint2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsVector.delete_Vector_HPoint2Dd
    __del__ = lambda self : None;
    def __iadd__(*args): return _NurbsVector.Vector_HPoint2Dd___iadd__(*args)
    def __isub__(*args): return _NurbsVector.Vector_HPoint2Dd___isub__(*args)
    def assign_from(*args): return _NurbsVector.Vector_HPoint2Dd_assign_from(*args)
    def as_func(*args): return _NurbsVector.Vector_HPoint2Dd_as_func(*args)
    def get(*args): return _NurbsVector.Vector_HPoint2Dd_get(*args)
    def minIndex(*args): return _NurbsVector.Vector_HPoint2Dd_minIndex(*args)
    def minimum(*args): return _NurbsVector.Vector_HPoint2Dd_minimum(*args)
    def qSortStd(*args): return _NurbsVector.Vector_HPoint2Dd_qSortStd(*args)
    def qSort(*args): return _NurbsVector.Vector_HPoint2Dd_qSort(*args)
    def sortIndex(*args): return _NurbsVector.Vector_HPoint2Dd_sortIndex(*args)
Vector_HPoint2Dd_swigregister = _NurbsVector.Vector_HPoint2Dd_swigregister
Vector_HPoint2Dd_swigregister(Vector_HPoint2Dd)

class Vector_HPoint3Dd(NurbsBasicArray.BasicArray_HPoint3Dd):
    __swig_setmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_HPoint3Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector_HPoint3Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsBasicArray.BasicArray_HPoint3Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector_HPoint3Dd, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsVector.Vector_HPoint3Dd_rows(*args)
    def __init__(self, *args): 
        this = _NurbsVector.new_Vector_HPoint3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsVector.delete_Vector_HPoint3Dd
    __del__ = lambda self : None;
    def __iadd__(*args): return _NurbsVector.Vector_HPoint3Dd___iadd__(*args)
    def __isub__(*args): return _NurbsVector.Vector_HPoint3Dd___isub__(*args)
    def assign_from(*args): return _NurbsVector.Vector_HPoint3Dd_assign_from(*args)
    def as_func(*args): return _NurbsVector.Vector_HPoint3Dd_as_func(*args)
    def get(*args): return _NurbsVector.Vector_HPoint3Dd_get(*args)
    def minIndex(*args): return _NurbsVector.Vector_HPoint3Dd_minIndex(*args)
    def minimum(*args): return _NurbsVector.Vector_HPoint3Dd_minimum(*args)
    def qSortStd(*args): return _NurbsVector.Vector_HPoint3Dd_qSortStd(*args)
    def qSort(*args): return _NurbsVector.Vector_HPoint3Dd_qSort(*args)
    def sortIndex(*args): return _NurbsVector.Vector_HPoint3Dd_sortIndex(*args)
Vector_HPoint3Dd_swigregister = _NurbsVector.Vector_HPoint3Dd_swigregister
Vector_HPoint3Dd_swigregister(Vector_HPoint3Dd)
add = _NurbsVector.add
sub = _NurbsVector.sub
mul = _NurbsVector.mul
equals = _NurbsVector.equals
notequals = _NurbsVector.notequals



