# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _NurbsSurface
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import NurbsPoint
import NurbsHPoint
import NurbsMatrix
import NurbsArray2D
import NurbsVector
import NurbsBasicArray
import NurbsColor
import NurbsCurve
import NurbsMatrixRT
import NurbsCoordinate
class ParaSurface3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParaSurface3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParaSurface3d, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def hpointAt(*args): return _NurbsSurface.ParaSurface3d_hpointAt(*args)
    def pointAt(*args): return _NurbsSurface.ParaSurface3d_pointAt(*args)
    def deriveAtH(*args): return _NurbsSurface.ParaSurface3d_deriveAtH(*args)
    def deriveAt(*args): return _NurbsSurface.ParaSurface3d_deriveAt(*args)
    def minDist2(*args): return _NurbsSurface.ParaSurface3d_minDist2(*args)
    def minDist2b(*args): return _NurbsSurface.ParaSurface3d_minDist2b(*args)
    def minDist2xy(*args): return _NurbsSurface.ParaSurface3d_minDist2xy(*args)
    def projectOn(*args): return _NurbsSurface.ParaSurface3d_projectOn(*args)
    def extremum(*args): return _NurbsSurface.ParaSurface3d_extremum(*args)
    def intersectWith(*args): return _NurbsSurface.ParaSurface3d_intersectWith(*args)
    def writeVRML(*args): return _NurbsSurface.ParaSurface3d_writeVRML(*args)
    def writeVRML97(*args): return _NurbsSurface.ParaSurface3d_writeVRML97(*args)
    __swig_destroy__ = _NurbsSurface.delete_ParaSurface3d
    __del__ = lambda self : None;
ParaSurface3d_swigregister = _NurbsSurface.ParaSurface3d_swigregister
ParaSurface3d_swigregister(ParaSurface3d)

u_direction = _NurbsSurface.u_direction
v_direction = _NurbsSurface.v_direction
both_direction = _NurbsSurface.both_direction
class NurbsSurfaced(ParaSurface3d):
    __swig_setmethods__ = {}
    for _s in [ParaSurface3d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsSurfaced, name, value)
    __swig_getmethods__ = {}
    for _s in [ParaSurface3d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsSurfaced, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsSurface.new_NurbsSurfaced(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsSurface.delete_NurbsSurfaced
    __del__ = lambda self : None;
    def knotU(*args): return _NurbsSurface.NurbsSurfaced_knotU(*args)
    def knotV(*args): return _NurbsSurface.NurbsSurfaced_knotV(*args)
    def ctrlPnts(*args): return _NurbsSurface.NurbsSurfaced_ctrlPnts(*args)
    def degreeU(*args): return _NurbsSurface.NurbsSurfaced_degreeU(*args)
    def degreeV(*args): return _NurbsSurface.NurbsSurfaced_degreeV(*args)
    def assign_from(*args): return _NurbsSurface.NurbsSurfaced_assign_from(*args)
    def resize(*args): return _NurbsSurface.NurbsSurfaced_resize(*args)
    def resizeKeep(*args): return _NurbsSurface.NurbsSurfaced_resizeKeep(*args)
    def ok(*args): return _NurbsSurface.NurbsSurfaced_ok(*args)
    def basisFuns(*args): return _NurbsSurface.NurbsSurfaced_basisFuns(*args)
    def basisFunsU(*args): return _NurbsSurface.NurbsSurfaced_basisFunsU(*args)
    def basisFunsV(*args): return _NurbsSurface.NurbsSurfaced_basisFunsV(*args)
    def dersBasisFuns(*args): return _NurbsSurface.NurbsSurfaced_dersBasisFuns(*args)
    def deriveAt(*args): return _NurbsSurface.NurbsSurfaced_deriveAt(*args)
    def deriveAtH(*args): return _NurbsSurface.NurbsSurfaced_deriveAtH(*args)
    def normal(*args): return _NurbsSurface.NurbsSurfaced_normal(*args)
    def globalInterp(*args): return _NurbsSurface.NurbsSurfaced_globalInterp(*args)
    def globalInterpH(*args): return _NurbsSurface.NurbsSurfaced_globalInterpH(*args)
    def globalInterpClosedU(*args): return _NurbsSurface.NurbsSurfaced_globalInterpClosedU(*args)
    def globalInterpClosedUH(*args): return _NurbsSurface.NurbsSurfaced_globalInterpClosedUH(*args)
    def leastSquares(*args): return _NurbsSurface.NurbsSurfaced_leastSquares(*args)
    def leastSquaresClosedU(*args): return _NurbsSurface.NurbsSurfaced_leastSquaresClosedU(*args)
    def skinV(*args): return _NurbsSurface.NurbsSurfaced_skinV(*args)
    def skinU(*args): return _NurbsSurface.NurbsSurfaced_skinU(*args)
    def sweep(*args): return _NurbsSurface.NurbsSurfaced_sweep(*args)
    def makeFromRevolution(*args): return _NurbsSurface.NurbsSurfaced_makeFromRevolution(*args)
    def makeSphere(*args): return _NurbsSurface.NurbsSurfaced_makeSphere(*args)
    def makeTorus(*args): return _NurbsSurface.NurbsSurfaced_makeTorus(*args)
    def degreeElevate(*args): return _NurbsSurface.NurbsSurfaced_degreeElevate(*args)
    def degreeElevateU(*args): return _NurbsSurface.NurbsSurfaced_degreeElevateU(*args)
    def degreeElevateV(*args): return _NurbsSurface.NurbsSurfaced_degreeElevateV(*args)
    def decompose(*args): return _NurbsSurface.NurbsSurfaced_decompose(*args)
    def findSpan(*args): return _NurbsSurface.NurbsSurfaced_findSpan(*args)
    def findSpanU(*args): return _NurbsSurface.NurbsSurfaced_findSpanU(*args)
    def findSpanV(*args): return _NurbsSurface.NurbsSurfaced_findSpanV(*args)
    def findMultU(*args): return _NurbsSurface.NurbsSurfaced_findMultU(*args)
    def findMultV(*args): return _NurbsSurface.NurbsSurfaced_findMultV(*args)
    def refineKnots(*args): return _NurbsSurface.NurbsSurfaced_refineKnots(*args)
    def refineKnotU(*args): return _NurbsSurface.NurbsSurfaced_refineKnotU(*args)
    def refineKnotV(*args): return _NurbsSurface.NurbsSurfaced_refineKnotV(*args)
    def mergeKnots(*args): return _NurbsSurface.NurbsSurfaced_mergeKnots(*args)
    def mergeKnotU(*args): return _NurbsSurface.NurbsSurfaced_mergeKnotU(*args)
    def mergeKnotV(*args): return _NurbsSurface.NurbsSurfaced_mergeKnotV(*args)
    def area(*args): return _NurbsSurface.NurbsSurfaced_area(*args)
    def areaIn(*args): return _NurbsSurface.NurbsSurfaced_areaIn(*args)
    def areaF(*args): return _NurbsSurface.NurbsSurfaced_areaF(*args)
    def isoCurveU(*args): return _NurbsSurface.NurbsSurfaced_isoCurveU(*args)
    def isoCurveV(*args): return _NurbsSurface.NurbsSurfaced_isoCurveV(*args)
    def read(*args): return _NurbsSurface.NurbsSurfaced_read(*args)
    def write(*args): return _NurbsSurface.NurbsSurfaced_write(*args)
    def print_ostream(*args): return _NurbsSurface.NurbsSurfaced_print_ostream(*args)
    def writeVRML(*args): return _NurbsSurface.NurbsSurfaced_writeVRML(*args)
    def writeVRML97(*args): return _NurbsSurface.NurbsSurfaced_writeVRML97(*args)
    def writePOVRAY(*args): return _NurbsSurface.NurbsSurfaced_writePOVRAY(*args)
    def writeRIB(*args): return _NurbsSurface.NurbsSurfaced_writeRIB(*args)
    def tesselate(*args): return _NurbsSurface.NurbsSurfaced_tesselate(*args)
    def writePS(*args): return _NurbsSurface.NurbsSurfaced_writePS(*args)
    def writePSp(*args): return _NurbsSurface.NurbsSurfaced_writePSp(*args)
    def writeOOGL(*args): return _NurbsSurface.NurbsSurfaced_writeOOGL(*args)
    def writeDisplayQUADMESH(*args): return _NurbsSurface.NurbsSurfaced_writeDisplayQUADMESH(*args)
    def transform(*args): return _NurbsSurface.NurbsSurfaced_transform(*args)
    def modCP(*args): return _NurbsSurface.NurbsSurfaced_modCP(*args)
    def modCPby(*args): return _NurbsSurface.NurbsSurfaced_modCPby(*args)
    def modKnotU(*args): return _NurbsSurface.NurbsSurfaced_modKnotU(*args)
    def modKnotV(*args): return _NurbsSurface.NurbsSurfaced_modKnotV(*args)
    def movePoint(*args): return _NurbsSurface.NurbsSurfaced_movePoint(*args)
    def transpose(*args): return _NurbsSurface.NurbsSurfaced_transpose(*args)
    def getmodU(*args): return _NurbsSurface.NurbsSurfaced_getmodU(*args)
    def setmodU(*args): return _NurbsSurface.NurbsSurfaced_setmodU(*args)
    def getmodV(*args): return _NurbsSurface.NurbsSurfaced_getmodV(*args)
    def setmodV(*args): return _NurbsSurface.NurbsSurfaced_setmodV(*args)
NurbsSurfaced_swigregister = _NurbsSurface.NurbsSurfaced_swigregister
NurbsSurfaced_swigregister(NurbsSurfaced)
gordonSurface = _NurbsSurface.gordonSurface
globalSurfInterpXY = _NurbsSurface.globalSurfInterpXY
globalSurfApprox = _NurbsSurface.globalSurfApprox



