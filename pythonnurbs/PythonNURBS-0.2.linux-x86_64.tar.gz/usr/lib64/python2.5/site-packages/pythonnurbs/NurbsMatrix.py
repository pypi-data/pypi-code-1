# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _NurbsMatrix
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import NurbsArray2D
import NurbsPoint
import NurbsHPoint
import NurbsVector
import NurbsBasicArray
class Matrix_double(NurbsArray2D.Array2D_DOUBLE):
    __swig_setmethods__ = {}
    for _s in [NurbsArray2D.Array2D_DOUBLE]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix_double, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsArray2D.Array2D_DOUBLE]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix_double, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsMatrix.new_Matrix_double(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign_from(*args): return _NurbsMatrix.Matrix_double_assign_from(*args)
    def submatrix(*args): return _NurbsMatrix.Matrix_double_submatrix(*args)
    def as_func(*args): return _NurbsMatrix.Matrix_double_as_func(*args)
    def get(*args): return _NurbsMatrix.Matrix_double_get(*args)
    def __iadd__(*args): return _NurbsMatrix.Matrix_double___iadd__(*args)
    def __isub__(*args): return _NurbsMatrix.Matrix_double___isub__(*args)
    def __imul__(*args): return _NurbsMatrix.Matrix_double___imul__(*args)
    def __idiv__(*args): return _NurbsMatrix.Matrix_double___idiv__(*args)
    def herm(*args): return _NurbsMatrix.Matrix_double_herm(*args)
    def transpose(*args): return _NurbsMatrix.Matrix_double_transpose(*args)
    def flop(*args): return _NurbsMatrix.Matrix_double_flop(*args)
    def trace(*args): return _NurbsMatrix.Matrix_double_trace(*args)
    def norm(*args): return _NurbsMatrix.Matrix_double_norm(*args)
    def diag(*args): return _NurbsMatrix.Matrix_double_diag(*args)
    def getDiag(*args): return _NurbsMatrix.Matrix_double_getDiag(*args)
    def qSort(*args): return _NurbsMatrix.Matrix_double_qSort(*args)
    def read(*args): return _NurbsMatrix.Matrix_double_read(*args)
    def write(*args): return _NurbsMatrix.Matrix_double_write(*args)
    def writeRaw(*args): return _NurbsMatrix.Matrix_double_writeRaw(*args)
    __swig_destroy__ = _NurbsMatrix.delete_Matrix_double
    __del__ = lambda self : None;
Matrix_double_swigregister = _NurbsMatrix.Matrix_double_swigregister
Matrix_double_swigregister(Matrix_double)

class Matrix_Point2Dd(NurbsArray2D.Array2D_Point2Dd):
    __swig_setmethods__ = {}
    for _s in [NurbsArray2D.Array2D_Point2Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix_Point2Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsArray2D.Array2D_Point2Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix_Point2Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsMatrix.new_Matrix_Point2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign_from(*args): return _NurbsMatrix.Matrix_Point2Dd_assign_from(*args)
    def submatrix(*args): return _NurbsMatrix.Matrix_Point2Dd_submatrix(*args)
    def as_func(*args): return _NurbsMatrix.Matrix_Point2Dd_as_func(*args)
    def get(*args): return _NurbsMatrix.Matrix_Point2Dd_get(*args)
    def __iadd__(*args): return _NurbsMatrix.Matrix_Point2Dd___iadd__(*args)
    def __isub__(*args): return _NurbsMatrix.Matrix_Point2Dd___isub__(*args)
    def __imul__(*args): return _NurbsMatrix.Matrix_Point2Dd___imul__(*args)
    def __idiv__(*args): return _NurbsMatrix.Matrix_Point2Dd___idiv__(*args)
    def herm(*args): return _NurbsMatrix.Matrix_Point2Dd_herm(*args)
    def transpose(*args): return _NurbsMatrix.Matrix_Point2Dd_transpose(*args)
    def flop(*args): return _NurbsMatrix.Matrix_Point2Dd_flop(*args)
    def trace(*args): return _NurbsMatrix.Matrix_Point2Dd_trace(*args)
    def norm(*args): return _NurbsMatrix.Matrix_Point2Dd_norm(*args)
    def diag(*args): return _NurbsMatrix.Matrix_Point2Dd_diag(*args)
    def getDiag(*args): return _NurbsMatrix.Matrix_Point2Dd_getDiag(*args)
    def qSort(*args): return _NurbsMatrix.Matrix_Point2Dd_qSort(*args)
    def read(*args): return _NurbsMatrix.Matrix_Point2Dd_read(*args)
    def write(*args): return _NurbsMatrix.Matrix_Point2Dd_write(*args)
    def writeRaw(*args): return _NurbsMatrix.Matrix_Point2Dd_writeRaw(*args)
    __swig_destroy__ = _NurbsMatrix.delete_Matrix_Point2Dd
    __del__ = lambda self : None;
Matrix_Point2Dd_swigregister = _NurbsMatrix.Matrix_Point2Dd_swigregister
Matrix_Point2Dd_swigregister(Matrix_Point2Dd)

class Matrix_Point3Dd(NurbsArray2D.Array2D_Point3Dd):
    __swig_setmethods__ = {}
    for _s in [NurbsArray2D.Array2D_Point3Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix_Point3Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsArray2D.Array2D_Point3Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix_Point3Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsMatrix.new_Matrix_Point3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign_from(*args): return _NurbsMatrix.Matrix_Point3Dd_assign_from(*args)
    def submatrix(*args): return _NurbsMatrix.Matrix_Point3Dd_submatrix(*args)
    def as_func(*args): return _NurbsMatrix.Matrix_Point3Dd_as_func(*args)
    def get(*args): return _NurbsMatrix.Matrix_Point3Dd_get(*args)
    def __iadd__(*args): return _NurbsMatrix.Matrix_Point3Dd___iadd__(*args)
    def __isub__(*args): return _NurbsMatrix.Matrix_Point3Dd___isub__(*args)
    def __imul__(*args): return _NurbsMatrix.Matrix_Point3Dd___imul__(*args)
    def __idiv__(*args): return _NurbsMatrix.Matrix_Point3Dd___idiv__(*args)
    def herm(*args): return _NurbsMatrix.Matrix_Point3Dd_herm(*args)
    def transpose(*args): return _NurbsMatrix.Matrix_Point3Dd_transpose(*args)
    def flop(*args): return _NurbsMatrix.Matrix_Point3Dd_flop(*args)
    def trace(*args): return _NurbsMatrix.Matrix_Point3Dd_trace(*args)
    def norm(*args): return _NurbsMatrix.Matrix_Point3Dd_norm(*args)
    def diag(*args): return _NurbsMatrix.Matrix_Point3Dd_diag(*args)
    def getDiag(*args): return _NurbsMatrix.Matrix_Point3Dd_getDiag(*args)
    def qSort(*args): return _NurbsMatrix.Matrix_Point3Dd_qSort(*args)
    def read(*args): return _NurbsMatrix.Matrix_Point3Dd_read(*args)
    def write(*args): return _NurbsMatrix.Matrix_Point3Dd_write(*args)
    def writeRaw(*args): return _NurbsMatrix.Matrix_Point3Dd_writeRaw(*args)
    __swig_destroy__ = _NurbsMatrix.delete_Matrix_Point3Dd
    __del__ = lambda self : None;
Matrix_Point3Dd_swigregister = _NurbsMatrix.Matrix_Point3Dd_swigregister
Matrix_Point3Dd_swigregister(Matrix_Point3Dd)

class Matrix_HPoint3Dd(NurbsArray2D.Array2D_HPoint3Dd):
    __swig_setmethods__ = {}
    for _s in [NurbsArray2D.Array2D_HPoint3Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix_HPoint3Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsArray2D.Array2D_HPoint3Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix_HPoint3Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsMatrix.new_Matrix_HPoint3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign_from(*args): return _NurbsMatrix.Matrix_HPoint3Dd_assign_from(*args)
    def submatrix(*args): return _NurbsMatrix.Matrix_HPoint3Dd_submatrix(*args)
    def as_func(*args): return _NurbsMatrix.Matrix_HPoint3Dd_as_func(*args)
    def get(*args): return _NurbsMatrix.Matrix_HPoint3Dd_get(*args)
    def __iadd__(*args): return _NurbsMatrix.Matrix_HPoint3Dd___iadd__(*args)
    def __isub__(*args): return _NurbsMatrix.Matrix_HPoint3Dd___isub__(*args)
    def __imul__(*args): return _NurbsMatrix.Matrix_HPoint3Dd___imul__(*args)
    def __idiv__(*args): return _NurbsMatrix.Matrix_HPoint3Dd___idiv__(*args)
    def herm(*args): return _NurbsMatrix.Matrix_HPoint3Dd_herm(*args)
    def transpose(*args): return _NurbsMatrix.Matrix_HPoint3Dd_transpose(*args)
    def flop(*args): return _NurbsMatrix.Matrix_HPoint3Dd_flop(*args)
    def trace(*args): return _NurbsMatrix.Matrix_HPoint3Dd_trace(*args)
    def norm(*args): return _NurbsMatrix.Matrix_HPoint3Dd_norm(*args)
    def diag(*args): return _NurbsMatrix.Matrix_HPoint3Dd_diag(*args)
    def getDiag(*args): return _NurbsMatrix.Matrix_HPoint3Dd_getDiag(*args)
    def qSort(*args): return _NurbsMatrix.Matrix_HPoint3Dd_qSort(*args)
    def read(*args): return _NurbsMatrix.Matrix_HPoint3Dd_read(*args)
    def write(*args): return _NurbsMatrix.Matrix_HPoint3Dd_write(*args)
    def writeRaw(*args): return _NurbsMatrix.Matrix_HPoint3Dd_writeRaw(*args)
    __swig_destroy__ = _NurbsMatrix.delete_Matrix_HPoint3Dd
    __del__ = lambda self : None;
Matrix_HPoint3Dd_swigregister = _NurbsMatrix.Matrix_HPoint3Dd_swigregister
Matrix_HPoint3Dd_swigregister(Matrix_HPoint3Dd)

class Matrix_HPoint2Dd(NurbsArray2D.Array2D_HPoint2Dd):
    __swig_setmethods__ = {}
    for _s in [NurbsArray2D.Array2D_HPoint2Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix_HPoint2Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [NurbsArray2D.Array2D_HPoint2Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix_HPoint2Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsMatrix.new_Matrix_HPoint2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign_from(*args): return _NurbsMatrix.Matrix_HPoint2Dd_assign_from(*args)
    def submatrix(*args): return _NurbsMatrix.Matrix_HPoint2Dd_submatrix(*args)
    def as_func(*args): return _NurbsMatrix.Matrix_HPoint2Dd_as_func(*args)
    def get(*args): return _NurbsMatrix.Matrix_HPoint2Dd_get(*args)
    def __iadd__(*args): return _NurbsMatrix.Matrix_HPoint2Dd___iadd__(*args)
    def __isub__(*args): return _NurbsMatrix.Matrix_HPoint2Dd___isub__(*args)
    def __imul__(*args): return _NurbsMatrix.Matrix_HPoint2Dd___imul__(*args)
    def __idiv__(*args): return _NurbsMatrix.Matrix_HPoint2Dd___idiv__(*args)
    def herm(*args): return _NurbsMatrix.Matrix_HPoint2Dd_herm(*args)
    def transpose(*args): return _NurbsMatrix.Matrix_HPoint2Dd_transpose(*args)
    def flop(*args): return _NurbsMatrix.Matrix_HPoint2Dd_flop(*args)
    def trace(*args): return _NurbsMatrix.Matrix_HPoint2Dd_trace(*args)
    def norm(*args): return _NurbsMatrix.Matrix_HPoint2Dd_norm(*args)
    def diag(*args): return _NurbsMatrix.Matrix_HPoint2Dd_diag(*args)
    def getDiag(*args): return _NurbsMatrix.Matrix_HPoint2Dd_getDiag(*args)
    def qSort(*args): return _NurbsMatrix.Matrix_HPoint2Dd_qSort(*args)
    def read(*args): return _NurbsMatrix.Matrix_HPoint2Dd_read(*args)
    def write(*args): return _NurbsMatrix.Matrix_HPoint2Dd_write(*args)
    def writeRaw(*args): return _NurbsMatrix.Matrix_HPoint2Dd_writeRaw(*args)
    __swig_destroy__ = _NurbsMatrix.delete_Matrix_HPoint2Dd
    __del__ = lambda self : None;
Matrix_HPoint2Dd_swigregister = _NurbsMatrix.Matrix_HPoint2Dd_swigregister
Matrix_HPoint2Dd_swigregister(Matrix_HPoint2Dd)
add = _NurbsMatrix.add
sub = _NurbsMatrix.sub
equals = _NurbsMatrix.equals



