# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _NurbsArray2D
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import NurbsPoint
import NurbsHPoint
class Array2D_INT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2D_INT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2D_INT, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsArray2D.Array2D_INT_rows(*args)
    def cols(*args): return _NurbsArray2D.Array2D_INT_cols(*args)
    def __init__(self, *args): 
        this = _NurbsArray2D.new_Array2D_INT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsArray2D.delete_Array2D_INT
    __del__ = lambda self : None;
    def resize(*args): return _NurbsArray2D.Array2D_INT_resize(*args)
    def resizeKeep(*args): return _NurbsArray2D.Array2D_INT_resizeKeep(*args)
    def reset(*args): return _NurbsArray2D.Array2D_INT_reset(*args)
    def assign_from(*args): return _NurbsArray2D.Array2D_INT_assign_from(*args)
    def io_elem_width(*args): return _NurbsArray2D.Array2D_INT_io_elem_width(*args)
    def io_by_rows(*args): return _NurbsArray2D.Array2D_INT_io_by_rows(*args)
    def io_by_columns(*args): return _NurbsArray2D.Array2D_INT_io_by_columns(*args)
    def print_ostream(*args): return _NurbsArray2D.Array2D_INT_print_ostream(*args)
    def __getitem__(*args): return _NurbsArray2D.Array2D_INT___getitem__(*args)
    def __setitem__(*args): return _NurbsArray2D.Array2D_INT___setitem__(*args)
    def getelem(*args): return _NurbsArray2D.Array2D_INT_getelem(*args)
    def setelem(*args): return _NurbsArray2D.Array2D_INT_setelem(*args)
Array2D_INT_swigregister = _NurbsArray2D.Array2D_INT_swigregister
Array2D_INT_swigregister(Array2D_INT)

class Array2D_DOUBLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2D_DOUBLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2D_DOUBLE, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsArray2D.Array2D_DOUBLE_rows(*args)
    def cols(*args): return _NurbsArray2D.Array2D_DOUBLE_cols(*args)
    def __init__(self, *args): 
        this = _NurbsArray2D.new_Array2D_DOUBLE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsArray2D.delete_Array2D_DOUBLE
    __del__ = lambda self : None;
    def resize(*args): return _NurbsArray2D.Array2D_DOUBLE_resize(*args)
    def resizeKeep(*args): return _NurbsArray2D.Array2D_DOUBLE_resizeKeep(*args)
    def reset(*args): return _NurbsArray2D.Array2D_DOUBLE_reset(*args)
    def assign_from(*args): return _NurbsArray2D.Array2D_DOUBLE_assign_from(*args)
    def io_elem_width(*args): return _NurbsArray2D.Array2D_DOUBLE_io_elem_width(*args)
    def io_by_rows(*args): return _NurbsArray2D.Array2D_DOUBLE_io_by_rows(*args)
    def io_by_columns(*args): return _NurbsArray2D.Array2D_DOUBLE_io_by_columns(*args)
    def print_ostream(*args): return _NurbsArray2D.Array2D_DOUBLE_print_ostream(*args)
    def __getitem__(*args): return _NurbsArray2D.Array2D_DOUBLE___getitem__(*args)
    def __setitem__(*args): return _NurbsArray2D.Array2D_DOUBLE___setitem__(*args)
    def getelem(*args): return _NurbsArray2D.Array2D_DOUBLE_getelem(*args)
    def setelem(*args): return _NurbsArray2D.Array2D_DOUBLE_setelem(*args)
Array2D_DOUBLE_swigregister = _NurbsArray2D.Array2D_DOUBLE_swigregister
Array2D_DOUBLE_swigregister(Array2D_DOUBLE)

class Array2D_Point2Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2D_Point2Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2D_Point2Dd, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsArray2D.Array2D_Point2Dd_rows(*args)
    def cols(*args): return _NurbsArray2D.Array2D_Point2Dd_cols(*args)
    def __init__(self, *args): 
        this = _NurbsArray2D.new_Array2D_Point2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsArray2D.delete_Array2D_Point2Dd
    __del__ = lambda self : None;
    def resize(*args): return _NurbsArray2D.Array2D_Point2Dd_resize(*args)
    def resizeKeep(*args): return _NurbsArray2D.Array2D_Point2Dd_resizeKeep(*args)
    def reset(*args): return _NurbsArray2D.Array2D_Point2Dd_reset(*args)
    def assign_from(*args): return _NurbsArray2D.Array2D_Point2Dd_assign_from(*args)
    def io_elem_width(*args): return _NurbsArray2D.Array2D_Point2Dd_io_elem_width(*args)
    def io_by_rows(*args): return _NurbsArray2D.Array2D_Point2Dd_io_by_rows(*args)
    def io_by_columns(*args): return _NurbsArray2D.Array2D_Point2Dd_io_by_columns(*args)
    def print_ostream(*args): return _NurbsArray2D.Array2D_Point2Dd_print_ostream(*args)
    def __getitem__(*args): return _NurbsArray2D.Array2D_Point2Dd___getitem__(*args)
    def __setitem__(*args): return _NurbsArray2D.Array2D_Point2Dd___setitem__(*args)
    def getelem(*args): return _NurbsArray2D.Array2D_Point2Dd_getelem(*args)
    def setelem(*args): return _NurbsArray2D.Array2D_Point2Dd_setelem(*args)
Array2D_Point2Dd_swigregister = _NurbsArray2D.Array2D_Point2Dd_swigregister
Array2D_Point2Dd_swigregister(Array2D_Point2Dd)

class Array2D_Point3Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2D_Point3Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2D_Point3Dd, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsArray2D.Array2D_Point3Dd_rows(*args)
    def cols(*args): return _NurbsArray2D.Array2D_Point3Dd_cols(*args)
    def __init__(self, *args): 
        this = _NurbsArray2D.new_Array2D_Point3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsArray2D.delete_Array2D_Point3Dd
    __del__ = lambda self : None;
    def resize(*args): return _NurbsArray2D.Array2D_Point3Dd_resize(*args)
    def resizeKeep(*args): return _NurbsArray2D.Array2D_Point3Dd_resizeKeep(*args)
    def reset(*args): return _NurbsArray2D.Array2D_Point3Dd_reset(*args)
    def assign_from(*args): return _NurbsArray2D.Array2D_Point3Dd_assign_from(*args)
    def io_elem_width(*args): return _NurbsArray2D.Array2D_Point3Dd_io_elem_width(*args)
    def io_by_rows(*args): return _NurbsArray2D.Array2D_Point3Dd_io_by_rows(*args)
    def io_by_columns(*args): return _NurbsArray2D.Array2D_Point3Dd_io_by_columns(*args)
    def print_ostream(*args): return _NurbsArray2D.Array2D_Point3Dd_print_ostream(*args)
    def __getitem__(*args): return _NurbsArray2D.Array2D_Point3Dd___getitem__(*args)
    def __setitem__(*args): return _NurbsArray2D.Array2D_Point3Dd___setitem__(*args)
    def getelem(*args): return _NurbsArray2D.Array2D_Point3Dd_getelem(*args)
    def setelem(*args): return _NurbsArray2D.Array2D_Point3Dd_setelem(*args)
Array2D_Point3Dd_swigregister = _NurbsArray2D.Array2D_Point3Dd_swigregister
Array2D_Point3Dd_swigregister(Array2D_Point3Dd)

class Array2D_HPoint2Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2D_HPoint2Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2D_HPoint2Dd, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsArray2D.Array2D_HPoint2Dd_rows(*args)
    def cols(*args): return _NurbsArray2D.Array2D_HPoint2Dd_cols(*args)
    def __init__(self, *args): 
        this = _NurbsArray2D.new_Array2D_HPoint2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsArray2D.delete_Array2D_HPoint2Dd
    __del__ = lambda self : None;
    def resize(*args): return _NurbsArray2D.Array2D_HPoint2Dd_resize(*args)
    def resizeKeep(*args): return _NurbsArray2D.Array2D_HPoint2Dd_resizeKeep(*args)
    def reset(*args): return _NurbsArray2D.Array2D_HPoint2Dd_reset(*args)
    def assign_from(*args): return _NurbsArray2D.Array2D_HPoint2Dd_assign_from(*args)
    def io_elem_width(*args): return _NurbsArray2D.Array2D_HPoint2Dd_io_elem_width(*args)
    def io_by_rows(*args): return _NurbsArray2D.Array2D_HPoint2Dd_io_by_rows(*args)
    def io_by_columns(*args): return _NurbsArray2D.Array2D_HPoint2Dd_io_by_columns(*args)
    def print_ostream(*args): return _NurbsArray2D.Array2D_HPoint2Dd_print_ostream(*args)
    def __getitem__(*args): return _NurbsArray2D.Array2D_HPoint2Dd___getitem__(*args)
    def __setitem__(*args): return _NurbsArray2D.Array2D_HPoint2Dd___setitem__(*args)
    def getelem(*args): return _NurbsArray2D.Array2D_HPoint2Dd_getelem(*args)
    def setelem(*args): return _NurbsArray2D.Array2D_HPoint2Dd_setelem(*args)
Array2D_HPoint2Dd_swigregister = _NurbsArray2D.Array2D_HPoint2Dd_swigregister
Array2D_HPoint2Dd_swigregister(Array2D_HPoint2Dd)

class Array2D_HPoint3Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array2D_HPoint3Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array2D_HPoint3Dd, name)
    __repr__ = _swig_repr
    def rows(*args): return _NurbsArray2D.Array2D_HPoint3Dd_rows(*args)
    def cols(*args): return _NurbsArray2D.Array2D_HPoint3Dd_cols(*args)
    def __init__(self, *args): 
        this = _NurbsArray2D.new_Array2D_HPoint3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsArray2D.delete_Array2D_HPoint3Dd
    __del__ = lambda self : None;
    def resize(*args): return _NurbsArray2D.Array2D_HPoint3Dd_resize(*args)
    def resizeKeep(*args): return _NurbsArray2D.Array2D_HPoint3Dd_resizeKeep(*args)
    def reset(*args): return _NurbsArray2D.Array2D_HPoint3Dd_reset(*args)
    def assign_from(*args): return _NurbsArray2D.Array2D_HPoint3Dd_assign_from(*args)
    def io_elem_width(*args): return _NurbsArray2D.Array2D_HPoint3Dd_io_elem_width(*args)
    def io_by_rows(*args): return _NurbsArray2D.Array2D_HPoint3Dd_io_by_rows(*args)
    def io_by_columns(*args): return _NurbsArray2D.Array2D_HPoint3Dd_io_by_columns(*args)
    def print_ostream(*args): return _NurbsArray2D.Array2D_HPoint3Dd_print_ostream(*args)
    def __getitem__(*args): return _NurbsArray2D.Array2D_HPoint3Dd___getitem__(*args)
    def __setitem__(*args): return _NurbsArray2D.Array2D_HPoint3Dd___setitem__(*args)
    def getelem(*args): return _NurbsArray2D.Array2D_HPoint3Dd_getelem(*args)
    def setelem(*args): return _NurbsArray2D.Array2D_HPoint3Dd_setelem(*args)
Array2D_HPoint3Dd_swigregister = _NurbsArray2D.Array2D_HPoint3Dd_swigregister
Array2D_HPoint3Dd_swigregister(Array2D_HPoint3Dd)
out_op = _NurbsArray2D.out_op
in_op = _NurbsArray2D.in_op



