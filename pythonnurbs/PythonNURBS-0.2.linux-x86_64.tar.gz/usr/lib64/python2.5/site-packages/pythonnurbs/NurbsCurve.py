# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _NurbsCurve
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import NurbsVector
import NurbsBasicArray
import NurbsPoint
import NurbsHPoint
import NurbsColor
import NurbsMatrix
import NurbsArray2D
import NurbsMatrixRT
class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsCurve.new_doublep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsCurve.delete_doublep
    __del__ = lambda self : None;
    def assign(*args): return _NurbsCurve.doublep_assign(*args)
    def value(*args): return _NurbsCurve.doublep_value(*args)
    def cast(*args): return _NurbsCurve.doublep_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _NurbsCurve.doublep_frompointer
    if _newclass:frompointer = staticmethod(_NurbsCurve.doublep_frompointer)
doublep_swigregister = _NurbsCurve.doublep_swigregister
doublep_swigregister(doublep)
doublep_frompointer = _NurbsCurve.doublep_frompointer

class ParaCurve3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParaCurve3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParaCurve3d, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def hpointAt(*args): return _NurbsCurve.ParaCurve3d_hpointAt(*args)
    def pointAt(*args): return _NurbsCurve.ParaCurve3d_pointAt(*args)
    def deriveAtH(*args): return _NurbsCurve.ParaCurve3d_deriveAtH(*args)
    def deriveAt(*args): return _NurbsCurve.ParaCurve3d_deriveAt(*args)
    def minKnot(*args): return _NurbsCurve.ParaCurve3d_minKnot(*args)
    def maxKnot(*args): return _NurbsCurve.ParaCurve3d_maxKnot(*args)
    def minDist2(*args): return _NurbsCurve.ParaCurve3d_minDist2(*args)
    def minDistY(*args): return _NurbsCurve.ParaCurve3d_minDistY(*args)
    def minDistX(*args): return _NurbsCurve.ParaCurve3d_minDistX(*args)
    def minDistZ(*args): return _NurbsCurve.ParaCurve3d_minDistZ(*args)
    def extremum(*args): return _NurbsCurve.ParaCurve3d_extremum(*args)
    __swig_destroy__ = _NurbsCurve.delete_ParaCurve3d
    __del__ = lambda self : None;
ParaCurve3d_swigregister = _NurbsCurve.ParaCurve3d_swigregister
ParaCurve3d_swigregister(ParaCurve3d)

class ParaCurve2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParaCurve2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParaCurve2d, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def hpointAt(*args): return _NurbsCurve.ParaCurve2d_hpointAt(*args)
    def pointAt(*args): return _NurbsCurve.ParaCurve2d_pointAt(*args)
    def deriveAtH(*args): return _NurbsCurve.ParaCurve2d_deriveAtH(*args)
    def deriveAt(*args): return _NurbsCurve.ParaCurve2d_deriveAt(*args)
    def minKnot(*args): return _NurbsCurve.ParaCurve2d_minKnot(*args)
    def maxKnot(*args): return _NurbsCurve.ParaCurve2d_maxKnot(*args)
    def minDist2(*args): return _NurbsCurve.ParaCurve2d_minDist2(*args)
    def minDistY(*args): return _NurbsCurve.ParaCurve2d_minDistY(*args)
    def minDistX(*args): return _NurbsCurve.ParaCurve2d_minDistX(*args)
    def minDistZ(*args): return _NurbsCurve.ParaCurve2d_minDistZ(*args)
    def extremum(*args): return _NurbsCurve.ParaCurve2d_extremum(*args)
    __swig_destroy__ = _NurbsCurve.delete_ParaCurve2d
    __del__ = lambda self : None;
ParaCurve2d_swigregister = _NurbsCurve.ParaCurve2d_swigregister
ParaCurve2d_swigregister(ParaCurve2d)

class NurbsCurve2Dd(ParaCurve2d):
    __swig_setmethods__ = {}
    for _s in [ParaCurve2d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsCurve2Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [ParaCurve2d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsCurve2Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsCurve.new_NurbsCurve2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsCurve.delete_NurbsCurve2Dd
    __del__ = lambda self : None;
    def degree(*args): return _NurbsCurve.NurbsCurve2Dd_degree(*args)
    def ctrlPnts(*args): return _NurbsCurve.NurbsCurve2Dd_ctrlPnts(*args)
    def knot(*args): return _NurbsCurve.NurbsCurve2Dd_knot(*args)
    def resize(*args): return _NurbsCurve.NurbsCurve2Dd_resize(*args)
    def reset(*args): return _NurbsCurve.NurbsCurve2Dd_reset(*args)
    def assign_from(*args): return _NurbsCurve.NurbsCurve2Dd_assign_from(*args)
    def hpointAt(*args): return _NurbsCurve.NurbsCurve2Dd_hpointAt(*args)
    def deriveAtH(*args): return _NurbsCurve.NurbsCurve2Dd_deriveAtH(*args)
    def deriveAt(*args): return _NurbsCurve.NurbsCurve2Dd_deriveAt(*args)
    def derive3D(*args): return _NurbsCurve.NurbsCurve2Dd_derive3D(*args)
    def derive(*args): return _NurbsCurve.NurbsCurve2Dd_derive(*args)
    def normal(*args): return _NurbsCurve.NurbsCurve2Dd_normal(*args)
    def firstD(*args): return _NurbsCurve.NurbsCurve2Dd_firstD(*args)
    def firstDn(*args): return _NurbsCurve.NurbsCurve2Dd_firstDn(*args)
    def basisFun(*args): return _NurbsCurve.NurbsCurve2Dd_basisFun(*args)
    def basisFuns(*args): return _NurbsCurve.NurbsCurve2Dd_basisFuns(*args)
    def dersBasisFuns(*args): return _NurbsCurve.NurbsCurve2Dd_dersBasisFuns(*args)
    def minKnot(*args): return _NurbsCurve.NurbsCurve2Dd_minKnot(*args)
    def maxKnot(*args): return _NurbsCurve.NurbsCurve2Dd_maxKnot(*args)
    def findSpan(*args): return _NurbsCurve.NurbsCurve2Dd_findSpan(*args)
    def findMultSpan(*args): return _NurbsCurve.NurbsCurve2Dd_findMultSpan(*args)
    def findMult(*args): return _NurbsCurve.NurbsCurve2Dd_findMult(*args)
    def findKnot(*args): return _NurbsCurve.NurbsCurve2Dd_findKnot(*args)
    def getRemovalBnd(*args): return _NurbsCurve.NurbsCurve2Dd_getRemovalBnd(*args)
    def removeKnot(*args): return _NurbsCurve.NurbsCurve2Dd_removeKnot(*args)
    def removeKnotsBound(*args): return _NurbsCurve.NurbsCurve2Dd_removeKnotsBound(*args)
    def knotInsertion(*args): return _NurbsCurve.NurbsCurve2Dd_knotInsertion(*args)
    def refineKnotVector(*args): return _NurbsCurve.NurbsCurve2Dd_refineKnotVector(*args)
    def refineKnotVectorClosed(*args): return _NurbsCurve.NurbsCurve2Dd_refineKnotVectorClosed(*args)
    def mergeKnotVector(*args): return _NurbsCurve.NurbsCurve2Dd_mergeKnotVector(*args)
    def clamp(*args): return _NurbsCurve.NurbsCurve2Dd_clamp(*args)
    def unclamp(*args): return _NurbsCurve.NurbsCurve2Dd_unclamp(*args)
    def leastSquares(*args): return _NurbsCurve.NurbsCurve2Dd_leastSquares(*args)
    def leastSquaresH(*args): return _NurbsCurve.NurbsCurve2Dd_leastSquaresH(*args)
    def leastSquaresClosed(*args): return _NurbsCurve.NurbsCurve2Dd_leastSquaresClosed(*args)
    def leastSquaresClosedH(*args): return _NurbsCurve.NurbsCurve2Dd_leastSquaresClosedH(*args)
    def globalApproxErrBnd(*args): return _NurbsCurve.NurbsCurve2Dd_globalApproxErrBnd(*args)
    def globalApproxErrBnd2(*args): return _NurbsCurve.NurbsCurve2Dd_globalApproxErrBnd2(*args)
    def globalApproxErrBnd3(*args): return _NurbsCurve.NurbsCurve2Dd_globalApproxErrBnd3(*args)
    def globalInterp(*args): return _NurbsCurve.NurbsCurve2Dd_globalInterp(*args)
    def globalInterpH(*args): return _NurbsCurve.NurbsCurve2Dd_globalInterpH(*args)
    def globalInterpClosedH(*args): return _NurbsCurve.NurbsCurve2Dd_globalInterpClosedH(*args)
    def globalInterpClosed(*args): return _NurbsCurve.NurbsCurve2Dd_globalInterpClosed(*args)
    def globalInterpD(*args): return _NurbsCurve.NurbsCurve2Dd_globalInterpD(*args)
    def projectTo(*args): return _NurbsCurve.NurbsCurve2Dd_projectTo(*args)
    def length(*args): return _NurbsCurve.NurbsCurve2Dd_length(*args)
    def lengthIn(*args): return _NurbsCurve.NurbsCurve2Dd_lengthIn(*args)
    def lengthF(*args): return _NurbsCurve.NurbsCurve2Dd_lengthF(*args)
    def makeCircle(*args): return _NurbsCurve.NurbsCurve2Dd_makeCircle(*args)
    def makeLine(*args): return _NurbsCurve.NurbsCurve2Dd_makeLine(*args)
    def degreeElevate(*args): return _NurbsCurve.NurbsCurve2Dd_degreeElevate(*args)
    def decompose(*args): return _NurbsCurve.NurbsCurve2Dd_decompose(*args)
    def decomposeClosed(*args): return _NurbsCurve.NurbsCurve2Dd_decomposeClosed(*args)
    def splitAt(*args): return _NurbsCurve.NurbsCurve2Dd_splitAt(*args)
    def mergeOf(*args): return _NurbsCurve.NurbsCurve2Dd_mergeOf(*args)
    def transform(*args): return _NurbsCurve.NurbsCurve2Dd_transform(*args)
    def modCP(*args): return _NurbsCurve.NurbsCurve2Dd_modCP(*args)
    def modCPby(*args): return _NurbsCurve.NurbsCurve2Dd_modCPby(*args)
    def modKnot(*args): return _NurbsCurve.NurbsCurve2Dd_modKnot(*args)
    def movePoint(*args): return _NurbsCurve.NurbsCurve2Dd_movePoint(*args)
    def setTangent(*args): return _NurbsCurve.NurbsCurve2Dd_setTangent(*args)
    def setTangentAtEnd(*args): return _NurbsCurve.NurbsCurve2Dd_setTangentAtEnd(*args)
    def read(*args): return _NurbsCurve.NurbsCurve2Dd_read(*args)
    def write(*args): return _NurbsCurve.NurbsCurve2Dd_write(*args)
    def writePS(*args): return _NurbsCurve.NurbsCurve2Dd_writePS(*args)
    def writePSp(*args): return _NurbsCurve.NurbsCurve2Dd_writePSp(*args)
    def writeVRML(*args): return _NurbsCurve.NurbsCurve2Dd_writeVRML(*args)
    def writeVRML97(*args): return _NurbsCurve.NurbsCurve2Dd_writeVRML97(*args)
    def writeDisplayLINE(*args): return _NurbsCurve.NurbsCurve2Dd_writeDisplayLINE(*args)
    def drawImg(*args): return _NurbsCurve.NurbsCurve2Dd_drawImg(*args)
    def drawAaImg(*args): return _NurbsCurve.NurbsCurve2Dd_drawAaImg(*args)
    def tesselate(*args): return _NurbsCurve.NurbsCurve2Dd_tesselate(*args)
NurbsCurve2Dd_swigregister = _NurbsCurve.NurbsCurve2Dd_swigregister
NurbsCurve2Dd_swigregister(NurbsCurve2Dd)

class NurbsCurved(ParaCurve3d):
    __swig_setmethods__ = {}
    for _s in [ParaCurve3d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsCurved, name, value)
    __swig_getmethods__ = {}
    for _s in [ParaCurve3d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsCurved, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsCurve.new_NurbsCurved(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsCurve.delete_NurbsCurved
    __del__ = lambda self : None;
    def degree(*args): return _NurbsCurve.NurbsCurved_degree(*args)
    def ctrlPnts(*args): return _NurbsCurve.NurbsCurved_ctrlPnts(*args)
    def knot(*args): return _NurbsCurve.NurbsCurved_knot(*args)
    def resize(*args): return _NurbsCurve.NurbsCurved_resize(*args)
    def reset(*args): return _NurbsCurve.NurbsCurved_reset(*args)
    def assign_from(*args): return _NurbsCurve.NurbsCurved_assign_from(*args)
    def hpointAt(*args): return _NurbsCurve.NurbsCurved_hpointAt(*args)
    def deriveAtH(*args): return _NurbsCurve.NurbsCurved_deriveAtH(*args)
    def deriveAt(*args): return _NurbsCurve.NurbsCurved_deriveAt(*args)
    def derive3D(*args): return _NurbsCurve.NurbsCurved_derive3D(*args)
    def derive(*args): return _NurbsCurve.NurbsCurved_derive(*args)
    def normal(*args): return _NurbsCurve.NurbsCurved_normal(*args)
    def firstD(*args): return _NurbsCurve.NurbsCurved_firstD(*args)
    def firstDn(*args): return _NurbsCurve.NurbsCurved_firstDn(*args)
    def basisFun(*args): return _NurbsCurve.NurbsCurved_basisFun(*args)
    def basisFuns(*args): return _NurbsCurve.NurbsCurved_basisFuns(*args)
    def dersBasisFuns(*args): return _NurbsCurve.NurbsCurved_dersBasisFuns(*args)
    def minKnot(*args): return _NurbsCurve.NurbsCurved_minKnot(*args)
    def maxKnot(*args): return _NurbsCurve.NurbsCurved_maxKnot(*args)
    def findSpan(*args): return _NurbsCurve.NurbsCurved_findSpan(*args)
    def findMultSpan(*args): return _NurbsCurve.NurbsCurved_findMultSpan(*args)
    def findMult(*args): return _NurbsCurve.NurbsCurved_findMult(*args)
    def findKnot(*args): return _NurbsCurve.NurbsCurved_findKnot(*args)
    def getRemovalBnd(*args): return _NurbsCurve.NurbsCurved_getRemovalBnd(*args)
    def removeKnot(*args): return _NurbsCurve.NurbsCurved_removeKnot(*args)
    def removeKnotsBound(*args): return _NurbsCurve.NurbsCurved_removeKnotsBound(*args)
    def knotInsertion(*args): return _NurbsCurve.NurbsCurved_knotInsertion(*args)
    def refineKnotVector(*args): return _NurbsCurve.NurbsCurved_refineKnotVector(*args)
    def refineKnotVectorClosed(*args): return _NurbsCurve.NurbsCurved_refineKnotVectorClosed(*args)
    def mergeKnotVector(*args): return _NurbsCurve.NurbsCurved_mergeKnotVector(*args)
    def clamp(*args): return _NurbsCurve.NurbsCurved_clamp(*args)
    def unclamp(*args): return _NurbsCurve.NurbsCurved_unclamp(*args)
    def leastSquares(*args): return _NurbsCurve.NurbsCurved_leastSquares(*args)
    def leastSquaresH(*args): return _NurbsCurve.NurbsCurved_leastSquaresH(*args)
    def leastSquaresClosed(*args): return _NurbsCurve.NurbsCurved_leastSquaresClosed(*args)
    def leastSquaresClosedH(*args): return _NurbsCurve.NurbsCurved_leastSquaresClosedH(*args)
    def globalApproxErrBnd(*args): return _NurbsCurve.NurbsCurved_globalApproxErrBnd(*args)
    def globalApproxErrBnd2(*args): return _NurbsCurve.NurbsCurved_globalApproxErrBnd2(*args)
    def globalApproxErrBnd3(*args): return _NurbsCurve.NurbsCurved_globalApproxErrBnd3(*args)
    def globalInterp(*args): return _NurbsCurve.NurbsCurved_globalInterp(*args)
    def globalInterpH(*args): return _NurbsCurve.NurbsCurved_globalInterpH(*args)
    def globalInterpClosedH(*args): return _NurbsCurve.NurbsCurved_globalInterpClosedH(*args)
    def globalInterpClosed(*args): return _NurbsCurve.NurbsCurved_globalInterpClosed(*args)
    def globalInterpD(*args): return _NurbsCurve.NurbsCurved_globalInterpD(*args)
    def projectTo(*args): return _NurbsCurve.NurbsCurved_projectTo(*args)
    def length(*args): return _NurbsCurve.NurbsCurved_length(*args)
    def lengthIn(*args): return _NurbsCurve.NurbsCurved_lengthIn(*args)
    def lengthF(*args): return _NurbsCurve.NurbsCurved_lengthF(*args)
    def makeCircle(*args): return _NurbsCurve.NurbsCurved_makeCircle(*args)
    def makeLine(*args): return _NurbsCurve.NurbsCurved_makeLine(*args)
    def degreeElevate(*args): return _NurbsCurve.NurbsCurved_degreeElevate(*args)
    def decompose(*args): return _NurbsCurve.NurbsCurved_decompose(*args)
    def decomposeClosed(*args): return _NurbsCurve.NurbsCurved_decomposeClosed(*args)
    def splitAt(*args): return _NurbsCurve.NurbsCurved_splitAt(*args)
    def mergeOf(*args): return _NurbsCurve.NurbsCurved_mergeOf(*args)
    def transform(*args): return _NurbsCurve.NurbsCurved_transform(*args)
    def modCP(*args): return _NurbsCurve.NurbsCurved_modCP(*args)
    def modCPby(*args): return _NurbsCurve.NurbsCurved_modCPby(*args)
    def modKnot(*args): return _NurbsCurve.NurbsCurved_modKnot(*args)
    def movePoint(*args): return _NurbsCurve.NurbsCurved_movePoint(*args)
    def setTangent(*args): return _NurbsCurve.NurbsCurved_setTangent(*args)
    def setTangentAtEnd(*args): return _NurbsCurve.NurbsCurved_setTangentAtEnd(*args)
    def read(*args): return _NurbsCurve.NurbsCurved_read(*args)
    def write(*args): return _NurbsCurve.NurbsCurved_write(*args)
    def writePS(*args): return _NurbsCurve.NurbsCurved_writePS(*args)
    def writePSp(*args): return _NurbsCurve.NurbsCurved_writePSp(*args)
    def writeVRML(*args): return _NurbsCurve.NurbsCurved_writeVRML(*args)
    def writeVRML97(*args): return _NurbsCurve.NurbsCurved_writeVRML97(*args)
    def writeDisplayLINE(*args): return _NurbsCurve.NurbsCurved_writeDisplayLINE(*args)
    def drawImg(*args): return _NurbsCurve.NurbsCurved_drawImg(*args)
    def drawAaImg(*args): return _NurbsCurve.NurbsCurved_drawAaImg(*args)
    def tesselate(*args): return _NurbsCurve.NurbsCurved_tesselate(*args)
NurbsCurved_swigregister = _NurbsCurve.NurbsCurved_swigregister
NurbsCurved_swigregister(NurbsCurved)
generateCompatibleCurves = _NurbsCurve.generateCompatibleCurves

class NurbsCurveArray2Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsCurveArray2Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsCurveArray2Dd, name)
    __repr__ = _swig_repr
    def n(*args): return _NurbsCurve.NurbsCurveArray2Dd_n(*args)
    def __init__(self, *args): 
        this = _NurbsCurve.new_NurbsCurveArray2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsCurve.delete_NurbsCurveArray2Dd
    __del__ = lambda self : None;
    def resize(*args): return _NurbsCurve.NurbsCurveArray2Dd_resize(*args)
    def init(*args): return _NurbsCurve.NurbsCurveArray2Dd_init(*args)
    def read(*args): return _NurbsCurve.NurbsCurveArray2Dd_read(*args)
    def write(*args): return _NurbsCurve.NurbsCurveArray2Dd_write(*args)
    def writePS(*args): return _NurbsCurve.NurbsCurveArray2Dd_writePS(*args)
    def writePSp(*args): return _NurbsCurve.NurbsCurveArray2Dd_writePSp(*args)
NurbsCurveArray2Dd_swigregister = _NurbsCurve.NurbsCurveArray2Dd_swigregister
NurbsCurveArray2Dd_swigregister(NurbsCurveArray2Dd)

class NurbsCurveArrayd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsCurveArrayd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsCurveArrayd, name)
    __repr__ = _swig_repr
    def n(*args): return _NurbsCurve.NurbsCurveArrayd_n(*args)
    def __init__(self, *args): 
        this = _NurbsCurve.new_NurbsCurveArrayd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsCurve.delete_NurbsCurveArrayd
    __del__ = lambda self : None;
    def resize(*args): return _NurbsCurve.NurbsCurveArrayd_resize(*args)
    def init(*args): return _NurbsCurve.NurbsCurveArrayd_init(*args)
    def read(*args): return _NurbsCurve.NurbsCurveArrayd_read(*args)
    def write(*args): return _NurbsCurve.NurbsCurveArrayd_write(*args)
    def writePS(*args): return _NurbsCurve.NurbsCurveArrayd_writePS(*args)
    def writePSp(*args): return _NurbsCurve.NurbsCurveArrayd_writePSp(*args)
NurbsCurveArrayd_swigregister = _NurbsCurve.NurbsCurveArrayd_swigregister
NurbsCurveArrayd_swigregister(NurbsCurveArrayd)



