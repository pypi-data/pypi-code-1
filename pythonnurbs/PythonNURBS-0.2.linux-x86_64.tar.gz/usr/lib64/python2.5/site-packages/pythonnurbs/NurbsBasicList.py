# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _NurbsBasicList
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class BasicNode_Point2Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicNode_Point2Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicNode_Point2Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsBasicList.new_BasicNode_Point2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicList.delete_BasicNode_Point2Dd
    __del__ = lambda self : None;
    __swig_setmethods__["data"] = _NurbsBasicList.BasicNode_Point2Dd_data_set
    __swig_getmethods__["data"] = _NurbsBasicList.BasicNode_Point2Dd_data_get
    if _newclass:data = _swig_property(_NurbsBasicList.BasicNode_Point2Dd_data_get, _NurbsBasicList.BasicNode_Point2Dd_data_set)
    __swig_setmethods__["prev"] = _NurbsBasicList.BasicNode_Point2Dd_prev_set
    __swig_getmethods__["prev"] = _NurbsBasicList.BasicNode_Point2Dd_prev_get
    if _newclass:prev = _swig_property(_NurbsBasicList.BasicNode_Point2Dd_prev_get, _NurbsBasicList.BasicNode_Point2Dd_prev_set)
    __swig_setmethods__["next"] = _NurbsBasicList.BasicNode_Point2Dd_next_set
    __swig_getmethods__["next"] = _NurbsBasicList.BasicNode_Point2Dd_next_get
    if _newclass:next = _swig_property(_NurbsBasicList.BasicNode_Point2Dd_next_get, _NurbsBasicList.BasicNode_Point2Dd_next_set)
    def getdata(*args): return _NurbsBasicList.BasicNode_Point2Dd_getdata(*args)
    def setdata(*args): return _NurbsBasicList.BasicNode_Point2Dd_setdata(*args)
BasicNode_Point2Dd_swigregister = _NurbsBasicList.BasicNode_Point2Dd_swigregister
BasicNode_Point2Dd_swigregister(BasicNode_Point2Dd)

class BasicList_Point2Dd(BasicNode_Point2Dd):
    __swig_setmethods__ = {}
    for _s in [BasicNode_Point2Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicList_Point2Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicNode_Point2Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicList_Point2Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsBasicList.new_BasicList_Point2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicList.delete_BasicList_Point2Dd
    __del__ = lambda self : None;
    def first(*args): return _NurbsBasicList.BasicList_Point2Dd_first(*args)
    def last(*args): return _NurbsBasicList.BasicList_Point2Dd_last(*args)
    __swig_setmethods__["current"] = _NurbsBasicList.BasicList_Point2Dd_current_set
    __swig_getmethods__["current"] = _NurbsBasicList.BasicList_Point2Dd_current_get
    if _newclass:current = _swig_property(_NurbsBasicList.BasicList_Point2Dd_current_get, _NurbsBasicList.BasicList_Point2Dd_current_set)
    def reset(*args): return _NurbsBasicList.BasicList_Point2Dd_reset(*args)
    def add(*args): return _NurbsBasicList.BasicList_Point2Dd_add(*args)
    def addElements(*args): return _NurbsBasicList.BasicList_Point2Dd_addElements(*args)
    def remove(*args): return _NurbsBasicList.BasicList_Point2Dd_remove(*args)
    def erase(*args): return _NurbsBasicList.BasicList_Point2Dd_erase(*args)
    def assign_from(*args): return _NurbsBasicList.BasicList_Point2Dd_assign_from(*args)
    def goToFirst(*args): return _NurbsBasicList.BasicList_Point2Dd_goToFirst(*args)
    def goToNext(*args): return _NurbsBasicList.BasicList_Point2Dd_goToNext(*args)
    def goToPrevious(*args): return _NurbsBasicList.BasicList_Point2Dd_goToPrevious(*args)
    def size(*args): return _NurbsBasicList.BasicList_Point2Dd_size(*args)
    delete_at_reset = _NurbsBasicList.BasicList_Point2Dd_delete_at_reset
    keep_at_reset = _NurbsBasicList.BasicList_Point2Dd_keep_at_reset
    def resetMode(*args): return _NurbsBasicList.BasicList_Point2Dd_resetMode(*args)
    def setResetMode(*args): return _NurbsBasicList.BasicList_Point2Dd_setResetMode(*args)
    def __getitem__(*args): return _NurbsBasicList.BasicList_Point2Dd___getitem__(*args)
BasicList_Point2Dd_swigregister = _NurbsBasicList.BasicList_Point2Dd_swigregister
BasicList_Point2Dd_swigregister(BasicList_Point2Dd)

class BasicNode_Point3Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicNode_Point3Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicNode_Point3Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsBasicList.new_BasicNode_Point3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicList.delete_BasicNode_Point3Dd
    __del__ = lambda self : None;
    __swig_setmethods__["data"] = _NurbsBasicList.BasicNode_Point3Dd_data_set
    __swig_getmethods__["data"] = _NurbsBasicList.BasicNode_Point3Dd_data_get
    if _newclass:data = _swig_property(_NurbsBasicList.BasicNode_Point3Dd_data_get, _NurbsBasicList.BasicNode_Point3Dd_data_set)
    __swig_setmethods__["prev"] = _NurbsBasicList.BasicNode_Point3Dd_prev_set
    __swig_getmethods__["prev"] = _NurbsBasicList.BasicNode_Point3Dd_prev_get
    if _newclass:prev = _swig_property(_NurbsBasicList.BasicNode_Point3Dd_prev_get, _NurbsBasicList.BasicNode_Point3Dd_prev_set)
    __swig_setmethods__["next"] = _NurbsBasicList.BasicNode_Point3Dd_next_set
    __swig_getmethods__["next"] = _NurbsBasicList.BasicNode_Point3Dd_next_get
    if _newclass:next = _swig_property(_NurbsBasicList.BasicNode_Point3Dd_next_get, _NurbsBasicList.BasicNode_Point3Dd_next_set)
    def getdata(*args): return _NurbsBasicList.BasicNode_Point3Dd_getdata(*args)
    def setdata(*args): return _NurbsBasicList.BasicNode_Point3Dd_setdata(*args)
BasicNode_Point3Dd_swigregister = _NurbsBasicList.BasicNode_Point3Dd_swigregister
BasicNode_Point3Dd_swigregister(BasicNode_Point3Dd)

class BasicList_Point3Dd(BasicNode_Point3Dd):
    __swig_setmethods__ = {}
    for _s in [BasicNode_Point3Dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicList_Point3Dd, name, value)
    __swig_getmethods__ = {}
    for _s in [BasicNode_Point3Dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasicList_Point3Dd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _NurbsBasicList.new_BasicList_Point3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicList.delete_BasicList_Point3Dd
    __del__ = lambda self : None;
    def first(*args): return _NurbsBasicList.BasicList_Point3Dd_first(*args)
    def last(*args): return _NurbsBasicList.BasicList_Point3Dd_last(*args)
    __swig_setmethods__["current"] = _NurbsBasicList.BasicList_Point3Dd_current_set
    __swig_getmethods__["current"] = _NurbsBasicList.BasicList_Point3Dd_current_get
    if _newclass:current = _swig_property(_NurbsBasicList.BasicList_Point3Dd_current_get, _NurbsBasicList.BasicList_Point3Dd_current_set)
    def reset(*args): return _NurbsBasicList.BasicList_Point3Dd_reset(*args)
    def add(*args): return _NurbsBasicList.BasicList_Point3Dd_add(*args)
    def addElements(*args): return _NurbsBasicList.BasicList_Point3Dd_addElements(*args)
    def remove(*args): return _NurbsBasicList.BasicList_Point3Dd_remove(*args)
    def erase(*args): return _NurbsBasicList.BasicList_Point3Dd_erase(*args)
    def assign_from(*args): return _NurbsBasicList.BasicList_Point3Dd_assign_from(*args)
    def goToFirst(*args): return _NurbsBasicList.BasicList_Point3Dd_goToFirst(*args)
    def goToNext(*args): return _NurbsBasicList.BasicList_Point3Dd_goToNext(*args)
    def goToPrevious(*args): return _NurbsBasicList.BasicList_Point3Dd_goToPrevious(*args)
    def size(*args): return _NurbsBasicList.BasicList_Point3Dd_size(*args)
    delete_at_reset = _NurbsBasicList.BasicList_Point3Dd_delete_at_reset
    keep_at_reset = _NurbsBasicList.BasicList_Point3Dd_keep_at_reset
    def resetMode(*args): return _NurbsBasicList.BasicList_Point3Dd_resetMode(*args)
    def setResetMode(*args): return _NurbsBasicList.BasicList_Point3Dd_setResetMode(*args)
    def __getitem__(*args): return _NurbsBasicList.BasicList_Point3Dd___getitem__(*args)
BasicList_Point3Dd_swigregister = _NurbsBasicList.BasicList_Point3Dd_swigregister
BasicList_Point3Dd_swigregister(BasicList_Point3Dd)



