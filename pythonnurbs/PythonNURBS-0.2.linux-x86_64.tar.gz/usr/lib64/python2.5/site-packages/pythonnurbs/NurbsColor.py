# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _NurbsColor
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _NurbsColor.Color_r_set
    __swig_getmethods__["r"] = _NurbsColor.Color_r_get
    if _newclass:r = _swig_property(_NurbsColor.Color_r_get, _NurbsColor.Color_r_set)
    __swig_setmethods__["g"] = _NurbsColor.Color_g_set
    __swig_getmethods__["g"] = _NurbsColor.Color_g_get
    if _newclass:g = _swig_property(_NurbsColor.Color_g_get, _NurbsColor.Color_g_set)
    __swig_setmethods__["b"] = _NurbsColor.Color_b_set
    __swig_getmethods__["b"] = _NurbsColor.Color_b_get
    if _newclass:b = _swig_property(_NurbsColor.Color_b_get, _NurbsColor.Color_b_set)
    def __init__(self, *args): 
        this = _NurbsColor.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(*args): return _NurbsColor.Color___iadd__(*args)
    def __isub__(*args): return _NurbsColor.Color___isub__(*args)
    def __imul__(*args): return _NurbsColor.Color___imul__(*args)
    def __idiv__(*args): return _NurbsColor.Color___idiv__(*args)
    def assign_from(*args): return _NurbsColor.Color_assign_from(*args)
    def fromXYZ(*args): return _NurbsColor.Color_fromXYZ(*args)
    def toXYZ(*args): return _NurbsColor.Color_toXYZ(*args)
    def fromYIQ(*args): return _NurbsColor.Color_fromYIQ(*args)
    def toYIQ(*args): return _NurbsColor.Color_toYIQ(*args)
    def fromHSV(*args): return _NurbsColor.Color_fromHSV(*args)
    def toHSV(*args): return _NurbsColor.Color_toHSV(*args)
    __swig_destroy__ = _NurbsColor.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _NurbsColor.Color_swigregister
Color_swigregister(Color)
mul = _NurbsColor.mul
add = _NurbsColor.add
in_op = _NurbsColor.in_op
out_op = _NurbsColor.out_op

__eq__ = _NurbsColor.__eq__
__ne__ = _NurbsColor.__ne__
__lt__ = _NurbsColor.__lt__
__gt__ = _NurbsColor.__gt__
__le__ = _NurbsColor.__le__
__ge__ = _NurbsColor.__ge__
__add__ = _NurbsColor.__add__
class ColorF(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorF, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorF, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _NurbsColor.ColorF_r_set
    __swig_getmethods__["r"] = _NurbsColor.ColorF_r_get
    if _newclass:r = _swig_property(_NurbsColor.ColorF_r_get, _NurbsColor.ColorF_r_set)
    __swig_setmethods__["g"] = _NurbsColor.ColorF_g_set
    __swig_getmethods__["g"] = _NurbsColor.ColorF_g_get
    if _newclass:g = _swig_property(_NurbsColor.ColorF_g_get, _NurbsColor.ColorF_g_set)
    __swig_setmethods__["b"] = _NurbsColor.ColorF_b_set
    __swig_getmethods__["b"] = _NurbsColor.ColorF_b_get
    if _newclass:b = _swig_property(_NurbsColor.ColorF_b_get, _NurbsColor.ColorF_b_set)
    def __init__(self, *args): 
        this = _NurbsColor.new_ColorF(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign_from(*args): return _NurbsColor.ColorF_assign_from(*args)
    __swig_destroy__ = _NurbsColor.delete_ColorF
    __del__ = lambda self : None;
ColorF_swigregister = _NurbsColor.ColorF_swigregister
ColorF_swigregister(ColorF)
__mul__ = _NurbsColor.__mul__

__lshift__ = _NurbsColor.__lshift__
__rshift__ = _NurbsColor.__rshift__


