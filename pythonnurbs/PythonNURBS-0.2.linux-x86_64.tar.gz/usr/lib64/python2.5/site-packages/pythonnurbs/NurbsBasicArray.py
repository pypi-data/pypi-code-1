# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _NurbsBasicArray
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import NurbsPoint
import NurbsHPoint
class BasicArray_HPoint2Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicArray_HPoint2Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicArray_HPoint2Dd, name)
    __repr__ = _swig_repr
    def n(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_n(*args)
    def __init__(self, *args): 
        this = _NurbsBasicArray.new_BasicArray_HPoint2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicArray.delete_BasicArray_HPoint2Dd
    __del__ = lambda self : None;
    def size(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_size(*args)
    def resize(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_resize(*args)
    def trim(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_trim(*args)
    def clear(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_clear(*args)
    def untrim(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_untrim(*args)
    def push_back(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_push_back(*args)
    def reset(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_reset(*args)
    def assign_from(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_assign_from(*args)
    def memory(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_memory(*args)
    def width(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_width(*args)
    def print_ostream(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_print_ostream(*args)
    def begin(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_begin(*args)
    def end(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd_end(*args)
    def __getitem__(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd___getitem__(*args)
    def __setitem__(*args): return _NurbsBasicArray.BasicArray_HPoint2Dd___setitem__(*args)
BasicArray_HPoint2Dd_swigregister = _NurbsBasicArray.BasicArray_HPoint2Dd_swigregister
BasicArray_HPoint2Dd_swigregister(BasicArray_HPoint2Dd)

class BasicArray_HPoint3Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicArray_HPoint3Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicArray_HPoint3Dd, name)
    __repr__ = _swig_repr
    def n(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_n(*args)
    def __init__(self, *args): 
        this = _NurbsBasicArray.new_BasicArray_HPoint3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicArray.delete_BasicArray_HPoint3Dd
    __del__ = lambda self : None;
    def size(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_size(*args)
    def resize(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_resize(*args)
    def trim(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_trim(*args)
    def clear(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_clear(*args)
    def untrim(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_untrim(*args)
    def push_back(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_push_back(*args)
    def reset(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_reset(*args)
    def assign_from(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_assign_from(*args)
    def memory(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_memory(*args)
    def width(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_width(*args)
    def print_ostream(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_print_ostream(*args)
    def begin(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_begin(*args)
    def end(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd_end(*args)
    def __getitem__(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd___getitem__(*args)
    def __setitem__(*args): return _NurbsBasicArray.BasicArray_HPoint3Dd___setitem__(*args)
BasicArray_HPoint3Dd_swigregister = _NurbsBasicArray.BasicArray_HPoint3Dd_swigregister
BasicArray_HPoint3Dd_swigregister(BasicArray_HPoint3Dd)

class BasicArray_Point2Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicArray_Point2Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicArray_Point2Dd, name)
    __repr__ = _swig_repr
    def n(*args): return _NurbsBasicArray.BasicArray_Point2Dd_n(*args)
    def __init__(self, *args): 
        this = _NurbsBasicArray.new_BasicArray_Point2Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicArray.delete_BasicArray_Point2Dd
    __del__ = lambda self : None;
    def size(*args): return _NurbsBasicArray.BasicArray_Point2Dd_size(*args)
    def resize(*args): return _NurbsBasicArray.BasicArray_Point2Dd_resize(*args)
    def trim(*args): return _NurbsBasicArray.BasicArray_Point2Dd_trim(*args)
    def clear(*args): return _NurbsBasicArray.BasicArray_Point2Dd_clear(*args)
    def untrim(*args): return _NurbsBasicArray.BasicArray_Point2Dd_untrim(*args)
    def push_back(*args): return _NurbsBasicArray.BasicArray_Point2Dd_push_back(*args)
    def reset(*args): return _NurbsBasicArray.BasicArray_Point2Dd_reset(*args)
    def assign_from(*args): return _NurbsBasicArray.BasicArray_Point2Dd_assign_from(*args)
    def memory(*args): return _NurbsBasicArray.BasicArray_Point2Dd_memory(*args)
    def width(*args): return _NurbsBasicArray.BasicArray_Point2Dd_width(*args)
    def print_ostream(*args): return _NurbsBasicArray.BasicArray_Point2Dd_print_ostream(*args)
    def begin(*args): return _NurbsBasicArray.BasicArray_Point2Dd_begin(*args)
    def end(*args): return _NurbsBasicArray.BasicArray_Point2Dd_end(*args)
    def __getitem__(*args): return _NurbsBasicArray.BasicArray_Point2Dd___getitem__(*args)
    def __setitem__(*args): return _NurbsBasicArray.BasicArray_Point2Dd___setitem__(*args)
BasicArray_Point2Dd_swigregister = _NurbsBasicArray.BasicArray_Point2Dd_swigregister
BasicArray_Point2Dd_swigregister(BasicArray_Point2Dd)

class BasicArray_Point3Dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicArray_Point3Dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicArray_Point3Dd, name)
    __repr__ = _swig_repr
    def n(*args): return _NurbsBasicArray.BasicArray_Point3Dd_n(*args)
    def __init__(self, *args): 
        this = _NurbsBasicArray.new_BasicArray_Point3Dd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicArray.delete_BasicArray_Point3Dd
    __del__ = lambda self : None;
    def size(*args): return _NurbsBasicArray.BasicArray_Point3Dd_size(*args)
    def resize(*args): return _NurbsBasicArray.BasicArray_Point3Dd_resize(*args)
    def trim(*args): return _NurbsBasicArray.BasicArray_Point3Dd_trim(*args)
    def clear(*args): return _NurbsBasicArray.BasicArray_Point3Dd_clear(*args)
    def untrim(*args): return _NurbsBasicArray.BasicArray_Point3Dd_untrim(*args)
    def push_back(*args): return _NurbsBasicArray.BasicArray_Point3Dd_push_back(*args)
    def reset(*args): return _NurbsBasicArray.BasicArray_Point3Dd_reset(*args)
    def assign_from(*args): return _NurbsBasicArray.BasicArray_Point3Dd_assign_from(*args)
    def memory(*args): return _NurbsBasicArray.BasicArray_Point3Dd_memory(*args)
    def width(*args): return _NurbsBasicArray.BasicArray_Point3Dd_width(*args)
    def print_ostream(*args): return _NurbsBasicArray.BasicArray_Point3Dd_print_ostream(*args)
    def begin(*args): return _NurbsBasicArray.BasicArray_Point3Dd_begin(*args)
    def end(*args): return _NurbsBasicArray.BasicArray_Point3Dd_end(*args)
    def __getitem__(*args): return _NurbsBasicArray.BasicArray_Point3Dd___getitem__(*args)
    def __setitem__(*args): return _NurbsBasicArray.BasicArray_Point3Dd___setitem__(*args)
BasicArray_Point3Dd_swigregister = _NurbsBasicArray.BasicArray_Point3Dd_swigregister
BasicArray_Point3Dd_swigregister(BasicArray_Point3Dd)

class BasicArray_INT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicArray_INT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicArray_INT, name)
    __repr__ = _swig_repr
    def n(*args): return _NurbsBasicArray.BasicArray_INT_n(*args)
    def __init__(self, *args): 
        this = _NurbsBasicArray.new_BasicArray_INT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicArray.delete_BasicArray_INT
    __del__ = lambda self : None;
    def size(*args): return _NurbsBasicArray.BasicArray_INT_size(*args)
    def resize(*args): return _NurbsBasicArray.BasicArray_INT_resize(*args)
    def trim(*args): return _NurbsBasicArray.BasicArray_INT_trim(*args)
    def clear(*args): return _NurbsBasicArray.BasicArray_INT_clear(*args)
    def untrim(*args): return _NurbsBasicArray.BasicArray_INT_untrim(*args)
    def push_back(*args): return _NurbsBasicArray.BasicArray_INT_push_back(*args)
    def reset(*args): return _NurbsBasicArray.BasicArray_INT_reset(*args)
    def assign_from(*args): return _NurbsBasicArray.BasicArray_INT_assign_from(*args)
    def memory(*args): return _NurbsBasicArray.BasicArray_INT_memory(*args)
    def width(*args): return _NurbsBasicArray.BasicArray_INT_width(*args)
    def print_ostream(*args): return _NurbsBasicArray.BasicArray_INT_print_ostream(*args)
    def begin(*args): return _NurbsBasicArray.BasicArray_INT_begin(*args)
    def end(*args): return _NurbsBasicArray.BasicArray_INT_end(*args)
    def __getitem__(*args): return _NurbsBasicArray.BasicArray_INT___getitem__(*args)
    def __setitem__(*args): return _NurbsBasicArray.BasicArray_INT___setitem__(*args)
BasicArray_INT_swigregister = _NurbsBasicArray.BasicArray_INT_swigregister
BasicArray_INT_swigregister(BasicArray_INT)

class BasicArray_DOUBLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasicArray_DOUBLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasicArray_DOUBLE, name)
    __repr__ = _swig_repr
    def n(*args): return _NurbsBasicArray.BasicArray_DOUBLE_n(*args)
    def __init__(self, *args): 
        this = _NurbsBasicArray.new_BasicArray_DOUBLE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _NurbsBasicArray.delete_BasicArray_DOUBLE
    __del__ = lambda self : None;
    def size(*args): return _NurbsBasicArray.BasicArray_DOUBLE_size(*args)
    def resize(*args): return _NurbsBasicArray.BasicArray_DOUBLE_resize(*args)
    def trim(*args): return _NurbsBasicArray.BasicArray_DOUBLE_trim(*args)
    def clear(*args): return _NurbsBasicArray.BasicArray_DOUBLE_clear(*args)
    def untrim(*args): return _NurbsBasicArray.BasicArray_DOUBLE_untrim(*args)
    def push_back(*args): return _NurbsBasicArray.BasicArray_DOUBLE_push_back(*args)
    def reset(*args): return _NurbsBasicArray.BasicArray_DOUBLE_reset(*args)
    def assign_from(*args): return _NurbsBasicArray.BasicArray_DOUBLE_assign_from(*args)
    def memory(*args): return _NurbsBasicArray.BasicArray_DOUBLE_memory(*args)
    def width(*args): return _NurbsBasicArray.BasicArray_DOUBLE_width(*args)
    def print_ostream(*args): return _NurbsBasicArray.BasicArray_DOUBLE_print_ostream(*args)
    def begin(*args): return _NurbsBasicArray.BasicArray_DOUBLE_begin(*args)
    def end(*args): return _NurbsBasicArray.BasicArray_DOUBLE_end(*args)
    def __getitem__(*args): return _NurbsBasicArray.BasicArray_DOUBLE___getitem__(*args)
    def __setitem__(*args): return _NurbsBasicArray.BasicArray_DOUBLE___setitem__(*args)
BasicArray_DOUBLE_swigregister = _NurbsBasicArray.BasicArray_DOUBLE_swigregister
BasicArray_DOUBLE_swigregister(BasicArray_DOUBLE)
notequals = _NurbsBasicArray.notequals
equals = _NurbsBasicArray.equals
out_op = _NurbsBasicArray.out_op
in_op = _NurbsBasicArray.in_op



